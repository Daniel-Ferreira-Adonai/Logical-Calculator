import { generateBoolPermutations } from './generate-bool-permutations.js';
import { operationToString } from './operation-to-string.js';
import { findVariables } from './find-variables.js';
import { parseOperation } from './parse-operation.js';
import { evalOperation } from './eval.js';
function* getColumns(operations, includeSteps) {
    // Not variables, they are handled differently below
    if (operations.type !== 'variable') {
        // If includeSteps === false, only yield the outermost operation
        if (includeSteps) {
            for (const value of operations.values) {
                yield* getColumns(value, includeSteps);
            }
        }
        // Yield after above, so it goes from inside out
        yield [operations, operationToString(operations)];
    }
}
const deduplicateColumns = (columns) => {
    const seenColumns = new Set();
    const result = [];
    for (const column of columns) {
        if (!seenColumns.has(column[1])) {
            result.push(column);
            seenColumns.add(column[1]);
        }
    }
    return result;
};
const removeOuterParens = (string) => string.replace(/^\((.+)\)$/, '$1');
export const generateTable = (input, includeSteps = true) => {
    const parsed = parseOperation(input);
    const variables = findVariables(parsed);
    const rows = generateBoolPermutations(variables);
    const columns = deduplicateColumns(getColumns(parsed, includeSteps));
    const table = {
        columns: [...variables],
        rows: [],
        ast: parsed,
    };
    for (const [, stringified] of columns) {
        table.columns.push(removeOuterParens(stringified));
    }
    for (const variablePermutations of rows) {
        const row = [];
        for (const variable of variables) {
            row.push(variablePermutations[variable]);
        }
        for (const [operation] of columns) {
            row.push(evalOperation(operation, variablePermutations));
        }
        table.rows.push(row);
    }
    return table;
};
//# sourceMappingURL=generate-table.js.map